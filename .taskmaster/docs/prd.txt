# PRD: MCP сервер FinanceMarker.ru

## Обзор и цели
- Назначение: реализовать MCP-сервер для интеграции `FinanceMarker.ru` с LLM-агентами, IDE с ИИ, n8n и прочими MCP-совместимыми клиентами.
- Уровень: продакшн с оформлением репозитория (gitflic.ru) и публикацией в NPM, запуск через `npx`.
- Язык взаимодействия: все описания tools, логи и сообщения на русском (JSON-данные — как есть с API).
- Ссылки на контекст MCP: см. обзор и best practices по разработке MCP-серверов (например, гайд FlowHunt: https://www.flowhunt.io/blog/mcp-server-development-guide/).

## Пользователи/клиенты
- Роль окружения запуска сервера: внешние ИИ-клиенты (LLM-агенты), IDE-плагины с MCP, n8n и прочие MCP-инструменты. Пользовательских ролей в классическом смысле нет.

## Область охвата
- Полное покрытие API `FinanceMarker.ru` на основе `FinanceMarkerAPI.json` (лежит в корне репозитория) как набор MCP tools.
- Каждый HTTP эндпоинт → отдельный MCP tool; параметры эндпоинта → аргументы tool; описания и примеры — в документации tools.
- Базовый путь API: `https://financemarker.ru/api`.
- Ключевые разделы (согласно Swagger 2.0):
  - Calendar: `/fm/v2/calendar`
  - Disclosure: `/fm/v2/disclosure`
  - Dividends: `/fm/v2/dividends`
  - Exchanges: `/fm/v2/exchanges`
  - Experts: `/fm/v2/experts`
  - Ideas: `/fm/v2/ideas`, `/fm/v2/ideas/{id}`
  - Insiders: `/fm/v2/insider_transactions`
  - OperationMetric: `/fm/v2/operation_metrics`
  - Stocks: `/fm/v2/stocks`, `/fm/v2/stocks/{exchange}:{code}`
  - Token: `/fm/v2/token_info`
- Аутентификация: `ApiKeyAuth` через query-параметр `api_token`.

## Требования к безопасности и конфигурации
- API-ключ не хранится и не логируется, передается как параметр запуска процесса и/или переменная окружения: `FINANCEMARKER_API_TOKEN`.
- Настройки запуска (CLI):
  - `--api-token` (или переменная `FINANCEMARKER_API_TOKEN`)
  - `--base-url` (по умолчанию `https://financemarker.ru/api`)
  - `--log-level` (по умолчанию `debug`)
- Только отладочное логирование (debug). Исключить чувствительные данные из логов.

## Нефункциональные требования
- Производительность: ответы возвращаются напрямую либо из кэша (< 100 мс для кэш‑хитов, при сетевых вызовах — как ответ API).
- Кэширование: суточное TTL (24h). Простая реализация: file cache или встраиваемое key-value хранилище (например, `keyv` с файловым адаптером). Ключ кэша = `method:path?sortedParams`.
- Локализация: только русский язык для описаний tools/логов.
- Наблюдаемость: минимальный структурированный лог (уровни: error, info, debug).

## Данные и модели
- Типы ответов строго соответствуют спецификациям из `FinanceMarkerAPI.json` (Swagger 2.0). Для валидации/приведения — `zod` схемы, генерируемые по Swagger или описанные вручную для критичных структур.
- Общие сущности (в терминах Swagger): `Calendar`, `Disclosure`, `Dividend`, `Exchange`, `Expert`, `Idea`, `IdeaDetails`, `InsiderTransaction`, `Operation`, `OperationMetric`, `Owner`, `Ratio`, `Report`, `Share`, `Stock`, `StockInfo`, `StockSummary`, `TokenInfo`.

## Архитектура и стек
- Node.js + TypeScript.
- Дистрибуция: NPM пакет (ESM), бинарь/CLI: `financemarker-mcp`.
- Запуск: `npx financemarker-mcp --api-token=XXX` (или `FINANCEMARKER_API_TOKEN=XXX npx financemarker-mcp`).
- Сборка: современный бандлер (например, `tsup`), минимальные зависимости.
- MCP-транспорт: совместимый с клиентами (stdio/WebSocket в зависимости от выбранной lib). Предпочтение — stdio для простоты `npx`-запуска.
- HTTP-клиент: `undici` или `axios` (ESM).
- Кэш: file‑based (например, `keyv` + `@keyv/file`) с TTL=24h.

## API → MCP инструменты (инварианты)
- Для каждого пути из Swagger регистрируется MCP tool:
  - Имя: `fm_<tag>_<operation>` (например, `fm_dividends_list`).
  - Аргументы: строго соответствуют query/path параметрам Swagger (тип, обязательность, значения по умолчанию).
  - Описание: русский язык, кратко что делает tool, что возвращает.
  - Результат: JSON из API без трансформации, дополнительно — служебные поля кэша (`fromCache: boolean`, `cachedAt: ISO`) если ответ из кэша.
- Ошибки API (`400/403/500`) возвращать как ошибки MCP tool с пробросом `code/message` из `Error` схемы Swagger.

## Документация tools
- Сгенерировать markdown для каждого tool: цель, параметры (имя, тип, default), примеры вызовов, описание схемы ответа.
- Сгенерировать общий обзорный документ.

## Тестирование и критерии приемки
- Ручное подключение MCP сервера к IDE и другим клиентам (MCP‑совместимым), проверка всех tools и аргументов, в том числе фильтрации и лимитов.
- Проверка кэширования: первый вызов — сетевой, повторный с теми же параметрами — кэш‑хит (< 100 мс), истечение TTL — инвалидация.
- Проверка ошибок: отсутствие токена, неверный токен, 5xx.

## Публикация и репозиторий
- Репозиторий: структура для gitflic.ru, лицензия, README (RU), CHANGELOG, GitHub Actions/CI не обязателен.
- Публикация: NPM (scoped/unscoped — TBD). Подготовить `bin`, `exports`, `types`, `engines`.

## План работ (верхнеуровневые задачи)
1) Каркас MCP‑сервера (CLI, транспорт stdio, конфиг, логирование).
2) Клиент FinanceMarker API (HTTP, типы, обработка ошибок).
3) Кэширование (keyv + file adapter, TTL=24h, ключи, инвалидация).
4) Мэппинг Swagger → набор MCP tools, генерация регистраций.
5) Реализация tools по разделам API (Calendar, Disclosure, ... Token).
6) Документация tools (md) и общий README.
7) Публикация NPM, проверка `npx` запуска.
8) Финальная приемка (интеграционные проверки с IDE/n8n).

## Ограничения
- Только FinanceMarker.ru; без иных интеграций.
- Только debug‑логирование.
- Только русский язык для описаний.

## Тэг задач
- Используется `master` (проект небольшой), тэгов больше не создаем.
